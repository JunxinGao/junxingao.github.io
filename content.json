{"pages":[{"title":"About","text":"Stay hungry, stay foolish. 1234567891011&quot;&quot;&quotquot;&quot;&quot;","link":"/about/index.html"}],"posts":[{"title":"linux编码转换","text":"编码转换命令如下1iconv -f GBK -t UTF-8 file1 -o file2 博客建好了，测试下markdown语法 This is an H1This is an H2 这是 H1 这是 H2 这是 H6 这是 H1这是 H2这是 H3First level headerThird level headerSecond level header This is a paragraph. A nested blockquote. Headers work lists too and all other block-level elements 1234567891011121314151617181920212223242526272829303132333435/** * @author John Smith &lt;john.smith@example.com&gt; * @version 1.0*/package l2f.gameserver.model;import java.util.ArrayList;public abstract class L2Character extends L2Object { public static final Short ABNORMAL_EFFECT_BLEEDING = 0x0_0_0_1; // not sure public void moveTo(int x, int y, int z) { _ai = null; _log.warning(&quot;Should not be called&quot;); if (1 &gt; 5) { return; } } /** Task of AI notification */ @SuppressWarnings( { &quot;nls&quot;, &quot;unqualified-field-access&quot;, &quot;boxing&quot; }) public class NotifyAITask implements Runnable { private final CtrlEvent _evt; List&lt;String&gt; mList = new ArrayList&lt;String&gt;() public void run() { try { getAI().notifyEvent(_evt, _evt.class, null); } catch (Throwable t) { t.printStackTrace(); } } }} 123456#include &lt;iostream&gt;int main(){ std::cout &lt;&lt; &quot;Hello, world!&quot; &lt;&lt; std::endl; return 0;} 12~~~~~~~code with tildes 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374$$\\begin{align*} &amp; \\phi(x,y) = \\phi \\left(\\sum_{i=1}^n x_ie_i, \\sum_{j=1}^n y_je_j \\right) = \\sum_{i=1}^n \\sum_{j=1}^n x_i y_j \\phi(e_i, e_j) = \\\\ &amp; (x_1, \\ldots, x_n) \\left( \\begin{array}{ccc} \\phi(e_1, e_1) &amp; \\cdots &amp; \\phi(e_1, e_n) \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\phi(e_n, e_1) &amp; \\cdots &amp; \\phi(e_n, e_n) \\end{array} \\right) \\left( \\begin{array}{c} y_1 \\\\ \\vdots \\\\ y_n \\end{array} \\right)\\end{align*}$$This \\`is not a code\\` span!This⋅para⋅line⋅starts⋅at⋅the⋅first⋅column.⋅However,⋅⋅⋅⋅⋅⋅the⋅following⋅lines⋅can⋅be⋅indented⋅any⋅number⋅of⋅spaces/tabs.⋅⋅⋅The⋅para⋅continues⋅here.⋅⋅This⋅is⋅another⋅paragraph,⋅not⋅connected⋅to⋅the⋅above⋅one.⋅But⋅⋅with⋅a⋅hard⋅line⋅break.⋅\\\\And⋅another⋅one.First level header==================Second level header------ Other first level header=This is a normalparagraph.And A Header------------And a paragraph&gt; This is a blockquote.And A Header------------header---paratest gcp~~~ html&lt;script type=&quot;text/javascript&quot;&gt;// Say hello world until the user starts questioning// the meaningfulness of their existence.function helloWorld(world) { for (var i = 42; --i &gt;= 0;) { alert('Hello ' + String(world)); }}&lt;/script&gt;&lt;style&gt;p { color: pink }b { color: blue }u { color: &quot;umber&quot; }&lt;/style&gt; 12$('#h2outline').height() //获取元素高度$('header').outerHeight() //获取元素外部高度(包括margin)","link":"/2016/01/28/2016/2016-01-29-linux-encodingconv/"},{"title":"客制化机械键盘-gh60 hhkb配列","text":"gh60-hhkb 组装过程 前言最近着迷于hhkb，无奈太贵，继而寻找到替代品，客制化gh60，可以组装成类hhkb。 hhkb布局: 材料 一个完整的机械键盘由四个部分组成 : 外壳, 内胆, 键帽, 数据线.一套完整的内胆由：PCB, 轴体 ,卫星轴 ,定位板 ,LED 组成. 由于手里有之前淘来的罗技g710垃圾成色可做拆轴用,可以省下轴体的费用,另外键帽淘宝有129的pbt键帽但是不透光那led灯就也没必要装,灯污染还是不要的好… 1.材料图: 图中有pcb、定位板、键帽、外壳,卫星轴和数据线就不上图了. 2.拆轴罗技G710+键盘: 之前淘宝淘来的拆轴板接了线买了键帽还可以使用就是难看了点，手感不错，我手上有一堆cherry黑轴也是从别的板子上拆过来的，但是我喜欢茶轴把g710+的茶轴拆下来换上黑轴还可以继续使用，嘿嘿. 过程1.先在pcb上装上卫星轴 挺简单的要注意下方向. 2.继续装开关轴 可以先用橡皮筋将pcb和定位板先固定住，然后再一个一个上轴. 3.再装键帽看下 这里先装键帽为了看下是否符合预期结果，然而我这里有一个问题，空格键是7x的，我装的是6.5x的卫星轴，空格键装不上，悲催…只好再去买7x的卫星轴，换空格键也是可以的，但是那样键盘整体看起来就不怎么舒服了，毕竟不是同一套键帽. 4.7x卫星轴到了 看下键帽是否整齐，不齐的话压一下. 整齐的话就可以焊锡了，这里焊的时候先用手指按下轴以防焊的不牢固. 5.焊好之后装外壳 一共6个螺丝钉，安好之后装键帽就大功告成了. 这边你会发现左右两边都空着，因为我买的两个1.5x滑块都没到，所以先装好试试.装滑块的话要在装外壳之前完成。 6.安装滑块后 嘿嘿，终于完成了，买材料之前一定要先弄清楚需要哪些东西.","link":"/2016/02/20/2016/2016-02-21-gh60-assemble/"},{"title":"一个禁用笔记本键盘的命令","text":"发现一个linux下禁用键盘的命令 1sudo rmmod atkbd 临时禁用然后把键盘放在笔记本上，再也不用担心外接键盘压到笔记本按键了。","link":"/2016/02/24/2016/2016-02-25-disablelabtopkeyboard/"},{"title":"linux下创建热点","text":"linux创建热点 create_ap先甩个链接： https://github.com/oblique/create_ap 安装就不说了. 首先先查看你的网卡 1234567891011121314151617181920212223242526~ » ifconfig enp2s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt; mtu 1500 ether 20:89:84:97:0d:ac txqueuelen 1000 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 0 (Local Loopback) RX packets 972 bytes 53280 (52.0 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 972 bytes 53280 (52.0 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0wlp3s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 10.202.36.11 netmask 255.255.252.0 broadcast 10.202.39.255 inet6 fe80::26fd:52ff:fe74:c002 prefixlen 64 scopeid 0x20&lt;link&gt; ether 24:fd:52:74:c0:02 txqueuelen 1000 (Ethernet) RX packets 35414 bytes 17903776 (17.0 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 14346 bytes 1851081 (1.7 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 可以看到网卡是enp2s0和wlp3s0，wlp3s0是无线网卡. Examples No passphrase (open network): create_ap wlan0 eth0 MyAccessPoint 我对应的命令就是 1sudo create_ap wlp3s0 enp2s0 MyAccessPoint 那么带密码： WPA + WPA2 passphrase: 1sudo create_ap wlp3s0 enp2s0 MyAccessPoint MyPassPhrase Internet sharing from the same WiFi interface: 1sudo create_ap wlp3s0 wlp3s0 MyAccessPoint MyPassPhrase 感觉常用的就这三个.","link":"/2016/02/27/2016/2016-02-28-linux-createap/"},{"title":"Hands-on Machine Learning with Scikit-Learn &amp; TensorFlow Study Notes—Chapter 1","text":"本文主要记录 Hands-on Machine Learning with Scikit-Learn &amp; TensorFlow 这本书第一章的学习笔记。 什么是机器学习?机器学习是通过编程让计算机从数据中进行学习的科学(和艺术)。 下面是一个更广义的概念: 机器学习是让计算机具有学习的能力,无需进行明确编程。——亚瑟·萨缪尔,1959 和一个工程性的概念: 计算机程序利用经验E学习任务T, 性能是P, 如果针对任务T的性能P随着经验E不断增长,则称为机器学习。——汤姆·米切尔,1997 机器学习系统的类型机器学习有多种类型,可以根据如下规则进行分类: 是否在人类监督下进行训练 (监督, 非监督, 半监督和强化学习) 是否可以动态渐进学习 (在线学习vs批量学习) 它们是否只是通过简单地比较新的数据点和已知的数据点, 或者在训练数据中进行模式识别, 以建立一个预测模型, 就像科学家所做的那样 (基于实例学习vs基于模型学习) 监督/非监督学习监督学习训练算法的训练数据包含了答案(称为label) 非监督学习训练算法的训练数据不包含label 半监督学习一些算法可以处理部分带标签的训练数据, 通常是大量不带标签数据加上小部分带标签数据。 强化学习学习系统在这里被称为智能体(agent), 可以对环境进行观察, 选择和执行动作, 获得奖励(负奖励是惩罚)。然后它必须自己学习哪个是最佳方法(称为策略, policy), 以得到长久的最大奖励。策略决定了智能体在给定情况下应该采取的行动。 批量和在线学习批量学习在批量学习中,系统不能进行持续学习: 必须用所有可用数据进行训练。这通常会占用大量时间和计算资源,所以一般是线下做的。首先是进行训练, 然后部署在生产环境且停止学习,它只是使用已经学到的策略。这称为离线学习。 在线学习在在线学习中,是用数据实例持续地进行训练, 可以一次一个或一次几个实例(称为小批量)。每个学习步骤都很快且廉价,所以系统可以动态地学习到达的新数据。 基于实例vs基于模型学习基于实例学习系统先用记忆学习案例,然后使用相似度测量推广到新的例子 基于模型学习另一种从样本集进行归纳的方法是建立这些样本的模型, 然后使用这个模型进行预测。","link":"/2019/01/07/2019/Hands-on-Machine-Learning-with-Scikit-Learn-TensorFlow-Study-Notes%E2%80%94Chapter-1/"},{"title":"Python Kafka","text":"kafka是一个分布式消息队列。具有高性能、持久化、多副本备份、横向扩展能力。生产者往队列里写消息，消费者从队列里取消息进行业务逻辑。一般在架构设计中起到解耦、削峰、异步处理的作用。 Confluent kafka clientReferencehttps://anaconda.org/conda-forge/python-confluent-kafka https://docs.confluent.io/current/clients/confluent-kafka-python/ https://github.com/confluentinc/confluent-kafka-python https://kafka.apache.org/quickstart Envs anaconda 4.5.11 python 3.6 python-confluent-kafka 0.11.4 Prepare 建立新的python3环境 conda create --name confluent-kafka-env python=3.6 conda activate confluent-kafka-env 通过conda安装 confluent kafka conda install python-confluent-kafka 下载并启动kafka server wget http://mirrors.hust.edu.cn/apache/kafka/2.1.0/kafka_2.11-2.1.0.tgz &amp;&amp; tar -xzf kafka_2.11-2.1.0.tgz cd kafka_2.11-2.1.0 bin/zookeeper-server-start.sh config/zookeeper.properties bin/kafka-server-start.sh config/server.properties Testhttps://github.com/Murugar/ConfluentPythonKafka.git Producer.py 1234567891011121314from time import gmtime, strftime, sleepfrom confluent_kafka import Producerp = Producer({'bootstrap.servers': 'localhost:9092'})while True: now = strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, gmtime()) p.produce('test_topic', now.encode('utf-8')) p.flush() sleep(1)#p.produce('mytopic', 'Test Message')#p.flush() Consumer.py 1234567891011121314from confluent_kafka import Consumer, KafkaErrorc = Consumer({'bootstrap.servers': 'localhost:9092', 'group.id': 'mygroup', 'default.topic.config': {'auto.offset.reset': 'smallest'}})c.subscribe(['test_topic'])running = Truewhile running: msg = c.poll() if not msg.error(): print('Received message: %s' % msg.value().decode('utf-8')) elif msg.error().code() != KafkaError._PARTITION_EOF: print(msg.error()) running = Falsec.close() 运行python python Producer.py python Consumer.py consumer 可以接收到来自 producer 的msg","link":"/2019/01/04/2019/Python-Kafka/"},{"title":"aws-shell &quot;&#39;Namespace&#39; object has no attribute &#39;cli_binary_format&#39;&quot;","text":"问题https://github.com/awslabs/aws-shell/issues/238 在aws-shell中运行cli命令时候失败 这个是因为当前aws-shell 并不支持 awscli v2 解决办法mac 卸载v2版本的awscli，安装v1版本的awscli 12brew uninstall awsclibrew install awscli@1 123456789101112131415161718192021==&gt; Downloading https://ghcr.io/v2/homebrew/core/awscli/1/manifests/1.20.10Already downloaded: /Users/Junxin/Library/Caches/Homebrew/downloads/75028ce994004c92af6e62b87f049ae457ab15d31a5c76678659fc0eb0e324a2--awscli@1-1.20.10.bottle_manifest.json==&gt; Downloading https://ghcr.io/v2/homebrew/core/awscli/1/blobs/sha256:4fe74c77019cd3ee34cf161f69048ab8805171e9d6236ecbf79482f12593fdf2Already downloaded: /Users/Junxin/Library/Caches/Homebrew/downloads/73be8076212d9de63292764c90652162a78fd1f15d25ef4e411c8f18c53277bb--awscli@1--1.20.10.mojave.bottle.tar.gz==&gt; Reinstalling awscli@1==&gt; Pouring awscli@1--1.20.10.mojave.bottle.tar.gz==&gt; CaveatsThe &quot;examples&quot; directory has been installed to: /usr/local/share/awscli/examplesawscli@1 is keg-only, which means it was not symlinked into /usr/local,because this is an alternate version of another formula.If you need to have awscli@1 first in your PATH, run: echo 'export PATH=&quot;/usr/local/opt/awscli@1/bin:$PATH&quot;' &gt;&gt; ~/.zshrczsh completions and functions have been installed to: /usr/local/opt/awscli@1/share/zsh/site-functions==&gt; Summary🍺 /usr/local/Cellar/awscli@1/1.20.10: 11,559 files, 79.8MB 删除老的软链接，并根据安装v1的版本号(1.20.10)创建新的软链接。 12rm /usr/local/bin/awsln -s /usr/local/Cellar/awscli@1/1.20.10/libexec/bin/aws /usr/local/bin/aws","link":"/2021/08/10/2021/aws-shell-cli-binary-format-issue/"},{"title":"删除无用docker镜像","text":"命令123docker ps -a | grep &quot;Exited&quot; | awk '{print $1 }'|xargs docker stopdocker ps -a | grep &quot;Exited&quot; | awk '{print $1 }'|xargs docker rmdocker images|grep none|awk '{print $3 }'|xargs docker rmi","link":"/2021/08/06/2021/remove_useless_docker_images/"},{"title":"隐藏ubuntu用户登录","text":"在登录界面隐藏普通用户在/var/lib/AccountsService/users/文件夹下新建一个与用户名相同的文件,在文件中加上SystemAccount=true e.g. 例如隐藏用户名为test_user 1234567cat /var/lib/AccountsService/users/test_user[InputSource0]xkb=us[User]XSession=SystemAccount=true","link":"/2021/08/06/2021/ubuntu_hide_user_login/"},{"title":"WSL自动启动 service","text":"问题WSL 无法自启动service 解决方式1. 新建bat脚本例如需要自启动 ssh 和 docker 服务，新建一个 wsl_startup.bat如下 12wsl -d Ubuntu -u root -e sudo service ssh startwsl -d Ubuntu -u root -e sudo service docker start 这里的 -d 用于指定不同的WSL，可在 CMD 通过 wsl -l 查询到 2. 复制脚本到windows自动目录运行中输入 shell:startup 复制刚才新建的脚本到此目录 3. 重启系统","link":"/2021/09/08/2021/wsl-auto-startup-service/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"gh60","slug":"gh60","link":"/tags/gh60/"},{"name":"HHKB","slug":"HHKB","link":"/tags/HHKB/"},{"name":"AP","slug":"AP","link":"/tags/AP/"},{"name":"Machine Learning","slug":"Machine-Learning","link":"/tags/Machine-Learning/"},{"name":"Scikit-Learn","slug":"Scikit-Learn","link":"/tags/Scikit-Learn/"},{"name":"TensorFlow","slug":"TensorFlow","link":"/tags/TensorFlow/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Kafka","slug":"Kafka","link":"/tags/Kafka/"},{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"WSL","slug":"WSL","link":"/tags/WSL/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Keyboard","slug":"Keyboard","link":"/categories/Keyboard/"},{"name":"Machine Learning","slug":"Machine-Learning","link":"/categories/Machine-Learning/"},{"name":"Kafka","slug":"Kafka","link":"/categories/Kafka/"},{"name":"AWS","slug":"AWS","link":"/categories/AWS/"},{"name":"Docker","slug":"Docker","link":"/categories/Docker/"},{"name":"Windows","slug":"Windows","link":"/categories/Windows/"}]}